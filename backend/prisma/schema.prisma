// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String                 @id @default(uuid())
  name           String
  email          String                 @unique
  phone          String                 @unique
  passwordHash   String                 @map("password_hash")
  bio            String?                // Adicionar campo para biografia
  imageUrl       String?                @map("image_url")
  isSystemAdmin  Boolean                @default(false) @map("is_system_admin")
  active         Boolean                @default(true)
  createdAt      DateTime               @default(now()) @map("created_at")
  updatedAt      DateTime               @updatedAt @map("updated_at")

  // Relações
  salonUsers         SalonUser[]
  appointmentHistory AppointmentHistory[] @relation("ChangedByUser")
  reports            Report[]             @relation("CreatedByUser")
  franchiseOwners    FranchiseOwner[]

  @@map("users")
}

model Salon {
  id                   String                  @id @default(uuid())
  name                 String
  address              String
  phone                String
  email                String
  logoUrl              String?                 @map("logo_url")
  businessHours        Json                    @map("business_hours")
  notificationSettings Json                    @map("notification_settings")
  version              Int                     @default(1)
  active               Boolean                 @default(true)
  createdAt            DateTime                @default(now()) @map("created_at")
  updatedAt            DateTime                @updatedAt @map("updated_at")
  franchiseId          String?                 @map("franchise_id")

  // Relações
  salonUsers         SalonUser[]
  services           Service[]
  clients            Client[]
  appointments       Appointment[]
  salonSubscriptions SalonSubscription[]
  webhooks           Webhook[]
  salonSettings      SalonSetting[]
  reports            Report[]
  chatbotConversations ChatbotConversation[]
  payments           Payment[]
  notifications      Notification[]
  franchise          Franchise?                @relation(fields: [franchiseId], references: [id])

  @@map("salons")
}

model SalonUser {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  salonId       String   @map("salon_id")
  role          Role
  workingHours  Json?    @map("working_hours")
  active        Boolean  @default(true)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relações
  user                User                   @relation(fields: [userId], references: [id])
  salon               Salon                  @relation(fields: [salonId], references: [id])
  professionalServices ProfessionalService[]
  appointments        Appointment[]          @relation("Professional")
  notifications       Notification[]         @relation("ProfessionalNotification")

  @@unique([salonId, userId])
  @@index([salonId, role])
  @@map("salon_users")
}

model Service {
  id          String    @id @default(uuid())
  salonId     String    @map("salon_id")
  name        String
  description String?
  price       Float
  duration    Int
  version     Int       @default(1)
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relações
  salon               Salon                 @relation(fields: [salonId], references: [id])
  professionalServices ProfessionalService[]
  appointments        Appointment[]

  @@map("services")
}

model ProfessionalService {
  id              String   @id @default(uuid())
  professionalId  String   @map("professional_id")
  serviceId       String   @map("service_id")
  price           Float
  durationMinutes Int      @map("duration_minutes")
  version         Int      @default(1)
  active          Boolean  @default(true)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relações
  professional SalonUser @relation(fields: [professionalId], references: [id])
  service      Service   @relation(fields: [serviceId], references: [id])

  @@unique([professionalId, serviceId])
  @@map("professional_services")
}

model Client {
  id        String    @id @default(uuid())
  salonId   String    @map("salon_id")
  name      String
  phone     String
  email     String?  
  notes     String?
  version   Int       @default(1)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // Relações
  salon                Salon                 @relation(fields: [salonId], references: [id])
  appointments         Appointment[]
  chatbotConversations ChatbotConversation[]
  notifications        Notification[]

  @@index([salonId, phone])
  @@map("clients")
}

model Appointment {
  id             String             @id @default(uuid())
  salonId        String             @map("salon_id")
  clientId       String             @map("client_id")
  professionalId String             @map("professional_id")
  serviceId      String             @map("service_id")
  startTime      DateTime           @map("start_time")
  endTime        DateTime           @map("end_time")
  status         AppointmentStatus
  price          Float
  notes          String?
  version        Int                @default(1)
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt @map("updated_at")

  // Relações
  salon              Salon                @relation(fields: [salonId], references: [id])
  client             Client               @relation(fields: [clientId], references: [id])
  professional       SalonUser            @relation("Professional", fields: [professionalId], references: [id])
  service            Service              @relation(fields: [serviceId], references: [id])
  appointmentHistory AppointmentHistory[]
  notifications      Notification[]

  @@index([salonId, startTime])
  @@index([professionalId, startTime])
  @@map("appointments")
}

model AppointmentHistory {
  id              String             @id @default(uuid())
  appointmentId   String             @map("appointment_id")
  status          AppointmentStatus
  notes           String?
  changedByUserId String             @map("changed_by_user_id")
  createdAt       DateTime           @default(now()) @map("created_at")

  // Relações
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  changedByUser User        @relation("ChangedByUser", fields: [changedByUserId], references: [id])

  @@map("appointment_history")
}

model ChatbotConversation {
  id        String             @id @default(uuid())
  clientId  String             @map("client_id")
  salonId   String             @map("salon_id")
  startTime DateTime           @map("start_time")
  endTime   DateTime?          @map("end_time")
  status    ChatbotStatus
  source    ChatbotSource
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @updatedAt @map("updated_at")

  // Relações
  client   Client            @relation(fields: [clientId], references: [id])
  salon    Salon             @relation(fields: [salonId], references: [id])
  messages ChatbotMessage[]

  @@index([salonId, clientId])
  @@index([salonId, status])
  @@map("chatbot_conversations")
}

model ChatbotMessage {
  id             String               @id @default(uuid())
  conversationId String               @map("conversation_id")
  senderType     SenderType
  content        String
  timestamp      DateTime
  intent         String?
  createdAt      DateTime             @default(now()) @map("created_at")

  // Relações
  conversation ChatbotConversation @relation(fields: [conversationId], references: [id])

  @@index([conversationId, timestamp])
  @@map("chatbot_messages")
}

model Webhook {
  id         String    @id @default(uuid())
  salonId    String    @map("salon_id")
  name       String
  eventType  String    @map("event_type")
  targetUrl  String    @map("target_url")
  headers    Json?
  active     Boolean   @default(true)
  secretKey  String    @map("secret_key")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  // Relações
  salon      Salon             @relation(fields: [salonId], references: [id])
  deliveries WebhookDelivery[]

  @@index([salonId, eventType])
  @@map("webhooks")
}

model WebhookDelivery {
  id            String                  @id @default(uuid())
  webhookId     String                  @map("webhook_id")
  eventId       String                  @map("event_id")
  payload       String
  responseCode  Int?                    @map("response_code")
  responseBody  String?                 @map("response_body")
  status        WebhookDeliveryStatus
  attempts      Int                     @default(0)
  lastAttemptAt DateTime?               @map("last_attempt_at")
  createdAt     DateTime                @default(now()) @map("created_at")

  // Relações
  webhook Webhook @relation(fields: [webhookId], references: [id])

  @@map("webhook_deliveries")
}

model SubscriptionPlan {
  id           String            @id @default(uuid())
  name         String
  description  String?
  features     Json
  price        Float
  billingCycle BillingCycle      @map("billing_cycle")
  active       Boolean           @default(true)
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")

  // Relações
  salonSubscriptions SalonSubscription[]

  @@map("subscription_plans")
}

model SalonSubscription {
  id            String              @id @default(uuid())
  salonId       String              @map("salon_id")
  planId        String              @map("plan_id")
  status        SubscriptionStatus
  startDate     DateTime            @map("start_date")
  endDate       DateTime?           @map("end_date")
  trialEndDate  DateTime?           @map("trial_end_date")
  createdAt     DateTime            @default(now()) @map("created_at")
  updatedAt     DateTime            @updatedAt @map("updated_at")
  couponId      String?             @map("coupon_id")

  // Relações
  salon       Salon                @relation(fields: [salonId], references: [id])
  plan        SubscriptionPlan     @relation(fields: [planId], references: [id])
  payments    Payment[]
  coupon      Coupon?              @relation(fields: [couponId], references: [id])

  @@index([salonId, status])
  @@map("salon_subscriptions")
}

model Payment {
  id              String               @id @default(uuid())
  salonId         String               @map("salon_id")
  subscriptionId  String?              @map("subscription_id")
  amount          Float
  status          PaymentStatus
  paymentMethod   String               @map("payment_method")
  transactionId   String?              @map("transaction_id")
  notes           String?
  createdAt       DateTime             @default(now()) @map("created_at")
  updatedAt       DateTime             @updatedAt @map("updated_at")

  // Relações
  salon        Salon             @relation(fields: [salonId], references: [id])
  subscription SalonSubscription? @relation(fields: [subscriptionId], references: [id])

  @@index([salonId, status])
  @@index([subscriptionId])
  @@map("payments")
}

model SalonSetting {
  id        String    @id @default(uuid())
  salonId   String    @map("salon_id")
  key       String
  value     Json
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // Relações
  salon Salon @relation(fields: [salonId], references: [id])

  @@unique([salonId, key])
  @@map("salon_settings")
}

model Report {
  id              String      @id @default(uuid())
  salonId         String      @map("salon_id")
  title           String
  type            ReportType
  parameters      Json
  resultUrl       String?     @map("result_url")
  status          ReportStatus
  createdByUserId String      @map("created_by_user_id")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  // Relações
  salon     Salon @relation(fields: [salonId], references: [id])
  createdBy User  @relation("CreatedByUser", fields: [createdByUserId], references: [id])

  @@map("reports")
}

model Notification {
  id             String             @id @default(uuid())
  salonId        String             @map("salon_id")
  appointmentId  String?            @map("appointment_id")
  clientId       String?            @map("client_id")
  professionalId String?            @map("professional_id")
  type           NotificationType
  payload        Json
  status         NotificationStatus
  sentAt         DateTime?          @map("sent_at")
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt @map("updated_at")

  // Relações
  salon        Salon           @relation(fields: [salonId], references: [id])
  appointment  Appointment?    @relation(fields: [appointmentId], references: [id])
  client       Client?         @relation(fields: [clientId], references: [id])
  professional SalonUser?      @relation("ProfessionalNotification", fields: [professionalId], references: [id])

  @@map("notifications")
}

model Coupon {
  id            String   @id @default(uuid())
  code          String   @unique
  description   String?
  discountType  DiscountType // PERCENTAGE ou FIXED_AMOUNT
  discountValue Float
  maxUses       Int?
  usedCount     Int      @default(0)
  validFrom     DateTime
  validUntil    DateTime?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  // Relações
  subscriptions SalonSubscription[]
}

model Franchise {
  id           String   @id @default(uuid())
  name         String
  description  String?
  logoUrl      String?  @map("logo_url")
  active       Boolean  @default(true)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relações
  salons       Salon[]
  owners       FranchiseOwner[]
}

model FranchiseOwner {
  id           String   @id @default(uuid())
  franchiseId  String   @map("franchise_id")
  userId       String   @map("user_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relações
  franchise    Franchise @relation(fields: [franchiseId], references: [id])
  user         User      @relation(fields: [userId], references: [id])
}

enum Role {
  FRANCHISE_OWNER
  OWNER
  PROFESSIONAL
  RECEPTIONIST

  @@map("roles")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum ChatbotStatus {
  ACTIVE
  COMPLETED
  FAILED
}

enum ChatbotSource {
  WHATSAPP
  WEBSITE
  APP
}

enum SenderType {
  CLIENT
  BOT
}

enum WebhookDeliveryStatus {
  SUCCESS
  FAILED
  PENDING
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  YEARLY
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  TRIALING
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ReportType {
  FINANCIAL
  APPOINTMENTS
  CLIENTS
  PROFESSIONALS
}

enum ReportStatus {
  PENDING
  COMPLETED
  FAILED
}

enum NotificationType {
  REMINDER
  CONFIRMATION
  CANCELLATION
  CUSTOM
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}
